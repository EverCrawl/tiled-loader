"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("fs"),e=require("path"),i=require("jsdom");function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var l=r(t),o=r(e);const n=new(new i.JSDOM("").window.DOMParser);async function s(t){return Promise.resolve(a(t))}function a({filePath:t}){const e=l.default.readFileSync(t,"utf-8"),i=n.parseFromString(e,"text/xml");let r;return p(i)?r={".amt":JSON.stringify(f(t,i))}:b(i)&&(r={".amt":JSON.stringify(h(t,i,["collision"]))}),r}const u=Object.freeze({0:"None",1:"Full",2:"Ladder",3:"Platform",4:"SlopeLeft",5:"SlopeRight",6:"SlopeLeftBottom",7:"SlopeRightBottom",8:"SlopeLeftTop",9:"SlopeRightTop",None:0,Full:1,Ladder:2,Platform:3,SlopeLeft:4,SlopeRight:5,SlopeLeftBottom:6,SlopeRightBottom:7,SlopeLeftTop:8,SlopeRightTop:9});function p(t){for(let e=0;e<t.children.length;++e){const i=t.children[e];if("map"===i.tagName&&null!=i.attributes.getNamedItem("tiledversion"))return!0}return!1}function g(t){const e=n.parseFromString(l.default.readFileSync(t,"utf-8"),"text/xml").getElementsByTagName("template")[0].getElementsByTagName("object")[0],i=m(e);return{type:e.getAttribute("type"),width:parseFloat(e.getAttribute("width"))??void 0,height:parseFloat(e.getAttribute("height"))??void 0,props:Object.keys(i??{}).length>0?i:void 0}}function c(t){return h(t,n.parseFromString(l.default.readFileSync(t,"utf-8"),"text/xml"))}function d(t,e){const i=t.getAttribute("template");let r;null!=i&&(r=g(o.default.join(e,i)));const l={...r?.props??{},...m(t)??{}},n=t.getAttribute("width")??r?.width??null,s=t.getAttribute("height")??r?.height??null;let a;if(null!=(a=t.querySelector("ellipse"))){return{type:r?.type??"ellipse",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,props:Object.keys(l).length>0?l:void 0}}if(null!=(a=t.querySelector("point"))){return{type:r?.type??"point",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),props:Object.keys(l).length>0?l:void 0}}if(null!=(a=t.querySelector("polygon"))){const e=parseFloat(t.getAttribute("x")),i=parseFloat(t.getAttribute("y")),o=[];for(const t of a.getAttribute("points").split(" ")){const r=t.indexOf(","),l=parseFloat(t.substr(0,r)),n=parseFloat(t.substr(r+1));o.push([e+l,i+n])}return{type:r?.type??"polygon",id:parseInt(t.getAttribute("id")),x:e,y:i,points:o,props:Object.keys(l).length>0?l:void 0}}if(null!=(a=t.querySelector("polyline"))){const e=parseFloat(t.getAttribute("x")),i=parseFloat(t.getAttribute("y")),o=[];for(const t of a.getAttribute("points").split(" ")){const r=t.indexOf(","),l=parseFloat(t.substr(0,r)),n=parseFloat(t.substr(r+1));o.push([e+l,i+n])}return{type:r?.type??"polyline",id:parseInt(t.getAttribute("id")),x:e,y:i,points:o,props:Object.keys(l).length>0?l:void 0}}if(null!=(a=t.querySelector("text"))){let e="";"1"===a.getAttribute("bold")&&(e+="b"),"1"===a.getAttribute("italic")&&(e+="i"),"1"===a.getAttribute("underline")&&(e+="u"),"1"===a.getAttribute("strikeout")&&(e+="s");let i=a.getAttribute("color")??"#000000";i.length>7&&(i="#"+i.substring(3)+i.substring(1,3));let o=a.getAttribute("halign")??"left";"justify"===o&&(o="left");let u=a.getAttribute("valign")??"top";"center"===u&&(u="middle");return{type:r?.type??"text",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,text:{font:a.getAttribute("fontfamily")??"sans-serif",size:parseFloat(a.getAttribute("pixelsize")??"16"),decoration:e,color:i,align:o,baseline:u,content:a.textContent},props:Object.keys(l).length>0?l:void 0}}{const e={type:r?.type??void 0,id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,props:Object.keys(l).length>0?l:void 0},i=t.getAttribute("gid");return null!=i?(void 0===e.type&&(e.type="tile"),e.tileId=i):void 0===e.type&&(e.type="rect"),e}}function f(t,e){const i=e.getElementsByTagName("map")[0],r={width:parseFloat(i.getAttribute("width")),height:parseFloat(i.getAttribute("height")),background:i.getAttribute("backgroundcolor"),tilesets:[],collision:[],tile:[],object:{}};let l=0;for(const t of i.getElementsByTagName("tileset")){const e=l++;r.tilesets[e]={id:e,firstgid:parseFloat(t.getAttribute("firstgid")),path:t.getAttribute("source")}}0===r.tilesets.length&&console.warn("");let n=[];for(const e of r.tilesets)n.push({id:e.id,firstgid:e.firstgid,data:c(o.default.join(o.default.dirname(t),e.path.replace(".tsx",".xml")))});n=n.sort(((t,e)=>t.firstgid-e.firstgid)).reverse();const s=[...i.getElementsByTagName("group")[0].getElementsByTagName("layer")].sort(((t,e)=>parseFloat(t.getAttribute("name"))-parseFloat(e.getAttribute("name"))));for(let e=0;e<s.length;++e){const i=s[e].getElementsByTagName("data")[0].textContent.replace(/\s+/g,"").split(",");for(let l=0;l<i.length/r.width;++l)for(let o=0;o<i.length/r.height;++o){const s=o+l*r.width;let a,p,g=parseFloat(i[s]);if(g&=536870911,0===g)null==r.collision[s]&&(r.collision[s]=u.None),a=0,p=0;else{const i=n.find((t=>t.firstgid<=g));if(null==i)throw new Error(`[File '${t}'] Could not find tileset for layer#${e}, expected tileset.firstgid < ${g}`);const l=i.data.tiles[g-i.firstgid];if(null!=l&&null!=l.props&&null!=l.props.collision){const t=u[l.props.collision];if(null==t)throw new Error(`Invalid CollisionKind ${l.props.collision}`);r.collision[s]=t}else null==r.collision[s]&&(r.collision[s]=u.None);a=i.id,p=g-i.firstgid+1}null==r.tile[e]&&(r.tile[e]=[]),r.tile[e][s]=a<<10>>>0|p<<0>>>0}}for(const e of i.getElementsByTagName("objectgroup")[0].getElementsByTagName("object")){const i=e.getAttribute("name");if(null==i)throw new Error(`[${t}] Object#${e.getAttribute("id")} is missing 'name'`);if(null!=r.object[i])throw new Error(`[${t}] Duplicate object name ${i}`);if(r.object[i]=d(e,o.default.dirname(t)),"tile"===r.object[i].type){const e=n.find((t=>t.firstgid<=r.object[i].tileId));if(null==e)throw new Error(`[File '${t}'] Could not find tileset for entity '${i}', expected tileset.firstgid < ${r.object[i].gid}`);const l=e.id,o=r.object[i].tileId-e.firstgid;r.object[i].tileId=l<<10>>>0|o<<0>>>0}}for(let t=0;t<r.tilesets.length;++t)r.tilesets[t]=r.tilesets[t].path.replace(".xml",".amt");return r}function b(t){for(let e=0;e<t.children.length;++e){const i=t.children[e];if("tileset"===i.tagName&&null!=i.attributes.getNamedItem("tiledversion"))return!0}return!1}function m(t,e=[]){const i=t.getElementsByTagName("properties")[0];if(null==i)return null;const r={};for(const t of i.getElementsByTagName("property")){const i=t.getAttribute("name");e.includes(i)||(r[t.getAttribute("name")]=t.getAttribute("value"))}return 0===Object.keys(r).length?null:r}function y(t){const e=t.getElementsByTagName("animation")[0];if(null==e)return null;const i=[];for(const t of e.getElementsByTagName("frame")){const e=parseInt(t.getAttribute("tileid"));i.push(e)}return i}function h(t,e,i=[]){const r=e.getElementsByTagName("tileset")[0],l=r.getElementsByTagName("image")[0].getAttribute("source"),o={};for(const t of r.getElementsByTagName("tile")){const e={},r=y(t);null!=r&&(e.anim=r);const l=m(t,i);null!=l&&(e.props=l),Object.keys(e).length>0&&(o[parseInt(t.getAttribute("id"))]=e)}return{image:l,tiles:o}}exports.CollisionKind=u,exports.default=function(){return{name:"snowpack-plugin-tiled",resolve:{input:[".xml"],output:[".amt"]},load:s}},exports.isTilemapXML=p,exports.isTilesetXML=b,exports.load=s,exports.loadSync=a,exports.loadTemplate=g,exports.transformTilemap=f,exports.transformTileset=h;
