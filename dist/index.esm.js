import t from"fs";import e from"path";import{JSDOM as i}from"jsdom";const r=new(new i("").window.DOMParser);async function o(t){return Promise.resolve(l(t))}function l({filePath:e}){const i=t.readFileSync(e,"utf-8"),o=r.parseFromString(i,"text/xml");let l;return s(o)?l={".amt":JSON.stringify(p(e,o))}:c(o)&&(l={".amt":JSON.stringify(b(e,o,["collision"]))}),l}const n=Object.freeze({0:"None",1:"Full",2:"Ladder",3:"Platform",4:"SlopeLeft",5:"SlopeRight",6:"SlopeLeftBottom",7:"SlopeRightBottom",8:"SlopeLeftTop",9:"SlopeRightTop",None:0,Full:1,Ladder:2,Platform:3,SlopeLeft:4,SlopeRight:5,SlopeLeftBottom:6,SlopeRightBottom:7,SlopeLeftTop:8,SlopeRightTop:9});function s(t){for(let e=0;e<t.children.length;++e){const i=t.children[e];if("map"===i.tagName&&null!=i.attributes.getNamedItem("tiledversion"))return!0}return!1}function a(e){const i=r.parseFromString(t.readFileSync(e,"utf-8"),"text/xml").getElementsByTagName("template")[0].getElementsByTagName("object")[0],o=d(i);return{type:i.getAttribute("type"),width:parseFloat(i.getAttribute("width"))??void 0,height:parseFloat(i.getAttribute("height"))??void 0,props:Object.keys(o??{}).length>0?o:void 0}}function g(e){return b(e,r.parseFromString(t.readFileSync(e,"utf-8"),"text/xml"))}function u(t,i){const r=t.getAttribute("template");let o;null!=r&&(o=a(e.join(i,r)));const l={...o?.props??{},...d(t)??{}},n=t.getAttribute("width")??o?.width??null,s=t.getAttribute("height")??o?.height??null;let g;if(null!=(g=t.querySelector("ellipse"))){return{type:o?.type??"ellipse",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,props:Object.keys(l).length>0?l:void 0}}if(null!=(g=t.querySelector("point"))){return{type:o?.type??"point",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),props:Object.keys(l).length>0?l:void 0}}if(null!=(g=t.querySelector("polygon"))){const e=parseFloat(t.getAttribute("x")),i=parseFloat(t.getAttribute("y")),r=[];for(const t of g.getAttribute("points").split(" ")){const o=t.indexOf(","),l=parseFloat(t.substr(0,o)),n=parseFloat(t.substr(o+1));r.push([e+l,i+n])}return{type:o?.type??"polygon",id:parseInt(t.getAttribute("id")),x:e,y:i,points:r,props:Object.keys(l).length>0?l:void 0}}if(null!=(g=t.querySelector("polyline"))){const e=parseFloat(t.getAttribute("x")),i=parseFloat(t.getAttribute("y")),r=[];for(const t of g.getAttribute("points").split(" ")){const o=t.indexOf(","),l=parseFloat(t.substr(0,o)),n=parseFloat(t.substr(o+1));r.push([e+l,i+n])}return{type:o?.type??"polyline",id:parseInt(t.getAttribute("id")),x:e,y:i,points:r,props:Object.keys(l).length>0?l:void 0}}if(null!=(g=t.querySelector("text"))){let e="";"1"===g.getAttribute("bold")&&(e+="b"),"1"===g.getAttribute("italic")&&(e+="i"),"1"===g.getAttribute("underline")&&(e+="u"),"1"===g.getAttribute("strikeout")&&(e+="s");let i=g.getAttribute("color")??"#000000";i.length>7&&(i="#"+i.substring(3)+i.substring(1,3));let r=g.getAttribute("halign")??"left";"justify"===r&&(r="left");let a=g.getAttribute("valign")??"top";"center"===a&&(a="middle");return{type:o?.type??"text",id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,text:{font:g.getAttribute("fontfamily")??"sans-serif",size:parseFloat(g.getAttribute("pixelsize")??"16"),decoration:e,color:i,align:r,baseline:a,content:g.textContent},props:Object.keys(l).length>0?l:void 0}}{const e={type:o?.type??void 0,id:parseInt(t.getAttribute("id")),x:parseFloat(t.getAttribute("x")),y:parseFloat(t.getAttribute("y")),width:n,height:s,props:Object.keys(l).length>0?l:void 0},i=t.getAttribute("gid");return null!=i?(void 0===e.type&&(e.type="tile"),e.tileId=i):void 0===e.type&&(e.type="rect"),e}}function p(t,i){const r=i.getElementsByTagName("map")[0],o={width:parseFloat(r.getAttribute("width")),height:parseFloat(r.getAttribute("height")),background:r.getAttribute("backgroundcolor"),tilesets:[],collision:[],tile:[],object:{}};let l=0;for(const t of r.getElementsByTagName("tileset")){const e=l++;o.tilesets[e]={id:e,firstgid:parseFloat(t.getAttribute("firstgid")),path:t.getAttribute("source")}}0===o.tilesets.length&&console.warn("");let s=[];for(const i of o.tilesets)s.push({id:i.id,firstgid:i.firstgid,data:g(e.join(e.dirname(t),i.path.replace(".tsx",".xml")))});s=s.sort(((t,e)=>t.firstgid-e.firstgid)).reverse();const a=[...r.getElementsByTagName("group")[0].getElementsByTagName("layer")].sort(((t,e)=>parseFloat(t.getAttribute("name"))-parseFloat(e.getAttribute("name"))));for(let e=0;e<a.length;++e){const i=a[e].getElementsByTagName("data")[0].textContent.replace(/\s+/g,"").split(",");for(let r=0;r<i.length/o.width;++r)for(let l=0;l<i.length/o.height;++l){const a=l+r*o.width;let g,u,p=parseFloat(i[a]);if(p&=536870911,0===p)null==o.collision[a]&&(o.collision[a]=n.None),g=0,u=0;else{const i=s.find((t=>t.firstgid<=p));if(null==i)throw new Error(`[File '${t}'] Could not find tileset for layer#${e}, expected tileset.firstgid < ${p}`);const r=i.data.tiles[p-i.firstgid];if(null!=r&&null!=r.props&&null!=r.props.collision){const t=n[r.props.collision];if(null==t)throw new Error(`Invalid CollisionKind ${r.props.collision}`);o.collision[a]=t}else null==o.collision[a]&&(o.collision[a]=n.None);g=i.id,u=p-i.firstgid+1}null==o.tile[e]&&(o.tile[e]=[]),o.tile[e][a]=g<<10>>>0|u<<0>>>0}}for(const i of r.getElementsByTagName("objectgroup")[0].getElementsByTagName("object")){const r=i.getAttribute("name");if(null==r)throw new Error(`[${t}] Object#${i.getAttribute("id")} is missing 'name'`);if(null!=o.object[r])throw new Error(`[${t}] Duplicate object name ${r}`);if(o.object[r]=u(i,e.dirname(t)),"tile"===o.object[r].type){const e=s.find((t=>t.firstgid<=o.object[r].tileId));if(null==e)throw new Error(`[File '${t}'] Could not find tileset for entity '${r}', expected tileset.firstgid < ${o.object[r].gid}`);const i=e.id,l=o.object[r].tileId-e.firstgid;o.object[r].tileId=i<<10>>>0|l<<0>>>0}}for(let t=0;t<o.tilesets.length;++t)o.tilesets[t]=o.tilesets[t].path.replace(".xml",".amt");return o}function c(t){for(let e=0;e<t.children.length;++e){const i=t.children[e];if("tileset"===i.tagName&&null!=i.attributes.getNamedItem("tiledversion"))return!0}return!1}function d(t,e=[]){const i=t.getElementsByTagName("properties")[0];if(null==i)return null;const r={};for(const t of i.getElementsByTagName("property")){const i=t.getAttribute("name");e.includes(i)||(r[t.getAttribute("name")]=t.getAttribute("value"))}return 0===Object.keys(r).length?null:r}function f(t){const e=t.getElementsByTagName("animation")[0];if(null==e)return null;const i=[];for(const t of e.getElementsByTagName("frame")){const e=parseInt(t.getAttribute("tileid"));i.push(e)}return i}function b(t,e,i=[]){const r=e.getElementsByTagName("tileset")[0],o=r.getElementsByTagName("image")[0].getAttribute("source"),l={};for(const t of r.getElementsByTagName("tile")){const e={},r=f(t);null!=r&&(e.anim=r);const o=d(t,i);null!=o&&(e.props=o),Object.keys(e).length>0&&(l[parseInt(t.getAttribute("id"))]=e)}return{image:o,tiles:l}}function m(){return{name:"snowpack-plugin-tiled",resolve:{input:[".xml"],output:[".amt"]},load:o}}export default m;export{n as CollisionKind,s as isTilemapXML,c as isTilesetXML,o as load,l as loadSync,a as loadTemplate,p as transformTilemap,b as transformTileset};
